";
        document.getElementById("date").value = entry.date || "";
        document.getElementById("orderNo").value = entry.order_no || "";
        document.getElementById("partyName").value = entry.party_name || "";
        document.getElementById("seedNo").value = entry.seed_no || "";
        document.getElementById("colorName").value = entry.color_name || "";
        document.getElementById("remarks").value = entry.remarks || "";
        resetCountRows();
        if(entry.counts_data && Array.isArray(entry.counts_data)) {
          let length = entry.counts_data.length;
          if(length === 1) { count1Radio.checked = true; row1.style.display = "block"; }
          else if(length === 2) { count2Radio.checked = true; row1.style.display = "block"; row2.style.display = "block"; }
          else if(length === 3) { count3Radio.checked = true; row1.style.display = "block"; row2.style.display = "block"; row3.style.display = "block"; }
          if(entry.counts_data[0]) {
            document.getElementById("countVal1").value = entry.counts_data[0].count || "";
            document.getElementById("qty1").value = entry.counts_data[0].qty || "";
          }
          if(entry.counts_data[1]) {
            document.getElementById("countVal2").value = entry.counts_data[1].count || "";
            document.getElementById("qty2").value = entry.counts_data[1].qty || "";
          }
          if(entry.counts_data[2]) {
            document.getElementById("countVal3").value = entry.counts_data[2].count || "";
            document.getElementById("qty3").value = entry.counts_data[2].qty || "";
          }
        }
      }
    }
    
    async function editEntry(id) {
      showLoading();
      const { data, error } = await supabaseClient.from('data_entries').select('*').eq('id', id).single();
      hideLoading();
      if(error || !data) {
        showToast("ডেটা লোডে সমস্যা বা এন্ট্রি পাওয়া যায়নি", "error");
        return;
      }
      setFormMode("edit", data);
      modal.classList.add("show");
    }
    async function deleteEntry(id) {
      const sure = confirm("আপনি কি নিশ্চিতভাবে ডিলিট করতে চান?");
      if(!sure) return;
      showLoading();
      const { error } = await supabaseClient.from('data_entries').delete().eq('id', id);
      hideLoading();
      if(error) {
        showToast("ডিলিট করতে সমস্যা হয়েছে: " + error.message, "error");
      } else {
        showToast("সফলভাবে ডিলিট হয়েছে");
        loadData();
      }
    }
    
    function formatDate(dateStr) {
      let date = new Date(dateStr);
      if(isNaN(date)) return '-';
      let day = date.getDate();
      let month = date.getMonth() + 1;
      let year = date.getFullYear();
      return (day < 10 ? "0" + day : day) + "-" + (month < 10 ? "0" + month : month) + "-" + year;
    }
    
    async function loadData(skipLoading = false) {
      if(!skipLoading) showLoading();
      let query = supabaseClient.from('data_entries').select('*').order('id', { ascending: false });
      const dateVal = filterDate.value;
      const monthVal = filterMonth.value;
      const yearVal = filterYear.value;
      const orderNoVal = filterOrderNo.value.trim();
      if (dateVal) {
        query = query.eq('date', dateVal);
      } else {
        if (yearVal) { query = query.ilike('date', `${yearVal}-%`); }
        if (monthVal) { query = query.ilike('date', `%-${monthVal}-%`); }
      }
      if (orderNoVal) { query = query.ilike('order_no', `%${orderNoVal}%`); }
      const { data, error } = await query;
      if(!skipLoading) hideLoading();
      if (error) { showToast("ডেটা লোডে সমস্যা: " + error.message, "error"); return; }
      const tbody = document.getElementById("dataTable").querySelector("tbody");
      tbody.innerHTML = "";
      data.forEach(entry => {
        let formattedDate = formatDate(entry.date);
        let countDisplay = "-";
        if(entry.counts_data && Array.isArray(entry.counts_data) && entry.counts_data.length > 0) {
          countDisplay = entry.counts_data.map(cd => `${cd.count || '-'} = ${cd.qty || '0'}`).join("<br>");
        }
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${formattedDate}</td>
          <td>${entry.order_no || '-'}</td>
          <td>${entry.party_name || '-'}</td>
          <td>${entry.seed_no || '-'}</td>
          <td>${entry.color_name || '-'}</td>
          <td>${countDisplay}</td>
          <td>${entry.remarks || '-'}</td>
          <td>${ entry.photo_url ? `<img src="${entry.photo_url}" width="50" alt="ফটো" class="preview-img">` : '-' }</td>
        `;
        tbody.appendChild(tr);
      });
      attachImagePreviewEvents();
    }
    
    let currentScale = 1, translateX = 0, translateY = 0;
    let isDragging = false, dragStartX = 0, dragStartY = 0;
    function resetTransform() {
      currentScale = 1;
      translateX = 0;
      translateY = 0;
      modalImg.style.transform = "translate(0px, 0px) scale(1)";
    }
    function attachImagePreviewEvents() {
      const images = document.querySelectorAll(".preview-img");
      images.forEach(img => {
        img.addEventListener("click", (e) => {
          photoSpinner.style.display = "block";
          modalImg.src = e.target.src;
          resetTransform();
          modalImg.onload = () => { photoSpinner.style.display = "none"; };
          photoModal.classList.add("show");
        });
      });
    }
    window.addEventListener("keydown", function(e) {
      if(photoModal.classList.contains("show") && e.ctrlKey){
        if(e.key === '+' || e.key === '='){
          currentScale += 0.1;
          modalImg.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentScale})`;
          e.preventDefault();
        } else if(e.key === '-'){
          currentScale = Math.max(1, currentScale - 0.1);
          modalImg.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentScale})`;
          e.preventDefault();
        }
      }
    });
    modalImg.addEventListener("mousedown", function(e) {
      isDragging = true;
      dragStartX = e.clientX - translateX;
      dragStartY = e.clientY - translateY;
    });
    window.addEventListener("mousemove", function(e) {
      if(isDragging) {
        translateX = e.clientX - dragStartX;
        translateY = e.clientY - dragStartY;
        modalImg.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentScale})`;
      }
    });
    window.addEventListener("mouseup", function(e) {
      isDragging = false;
    });
    let initialDistance = null, initialScale = 1;
    modalImg.addEventListener("touchstart", function(e) {
      if(e.touches.length === 2){
        initialDistance = Math.hypot(e.touches[0].pageX - e.touches[1].pageX, e.touches[0].pageY - e.touches[1].pageY);
        initialScale = currentScale;
      } else if(e.touches.length === 1){
        isDragging = true;
        dragStartX = e.touches[0].clientX - translateX;
        dragStartY = e.touches[0].clientY - translateY;
      }
    });
    modalImg.addEventListener("touchmove", function(e) {
      if(e.touches.length === 2 && initialDistance){
        let newDistance = Math.hypot(e.touches[0].pageX - e.touches[1].pageX, e.touches[0].pageY - e.touches[1].pageY);
        currentScale = Math.max(1, initialScale * (newDistance / initialDistance));
        modalImg.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentScale})`;
        e.preventDefault();
      } else if(e.touches.length === 1 && isDragging){
        translateX = e.touches[0].clientX - dragStartX;
        translateY = e.touches[0].clientY - dragStartY;
        modalImg.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentScale})`;
        e.preventDefault();
      }
    });
    modalImg.addEventListener("touchend", function(e) {
      if(e.touches.length < 2){ initialDistance = null; }
      if(e.touches.length === 0){ isDragging = false; }
    });
    closePhotoModal.addEventListener("click", (e) => {
      e.stopPropagation();
      photoModal.classList.remove("show");
    });
    const debouncedLoadData = debounce((skip) => { loadData(skip); }, 300);
    filterDate.addEventListener("change", () => { loadData(); });
    filterMonth.addEventListener("change", () => { loadData(); });
    filterYear.addEventListener("input", () => { loadData(); });
    filterOrderNo.addEventListener("input", () => { debouncedLoadData(true); });
    window.addEventListener("load", () => { loadData(); });
    
    const modifyModal = document.getElementById("modifyModal");
    const modifyBtn = document.getElementById("modifyBtn");
    const closeModifyModal = document.getElementById("closeModifyModal");
    modifyBtn.addEventListener("click", () => { modifyModal.classList.add("show"); });
    closeModifyModal.addEventListener("click", () => { modifyModal.classList.remove("show"); });
    window.addEventListener("click", (e) => { if(e.target === modifyModal) { modifyModal.classList.remove("show"); } });
    document.getElementById("searchOrderBtn").addEventListener("click", searchOrder);
    
    async function searchOrder() {
      const orderNo = document.getElementById("modifyOrderNo").value.trim();
      if(!orderNo) {
        showToast("অনুগ্রহ করে অর্ডার নং প্রবেশ করুন", "error");
        return;
      }
      showLoading();
      const { data, error } = await supabaseClient.from('data_entries').select('*').ilike('order_no', `%${orderNo}%`);
      hideLoading();
      const resultsDiv = document.getElementById("modifyResults");
      resultsDiv.innerHTML = "";
      if(error) {
        resultsDiv.innerHTML = "<p>ডেটা লোডে সমস্যা: " + error.message + "</p>";
        return;
      }
      if(data.length === 0) {
        resultsDiv.innerHTML = "<p>কোনও ডেটা পাওয়া যায়নি</p>";
        return;
      }
      let html = '<div style="overflow:auto;"><table style="width:100%; border-collapse:collapse;">';
      html += '<thead><tr style="background:#4e54c8; color:#fff;">';
      html += '<th>তারিখ</th><th>অর্ডার নং</th><th>পার্টি নাম</th><th>সেড নং</th><th>কালার নাম</th><th>কাউন্ট &amp; QTY</th><th>রেমার্কস</th><th>ফটো</th><th>অ্যাকশন</th>';
      html += '</tr></thead><tbody>';
      data.forEach(entry => {
        let formattedDate = formatDate(entry.date);
        let countDisplay = "-";
        if(entry.counts_data && Array.isArray(entry.counts_data) && entry.counts_data.length > 0) {
          countDisplay = entry.counts_data.map(cd => `${cd.count || '-'} = ${cd.qty || '0'}`).join("<br>");
        }
        html += `<tr style="border:1px solid #ccc; padding:8px;">
          <td>${formattedDate}</td>
          <td>${entry.order_no || '-'}</td>
          <td>${entry.party_name || '-'}</td>
          <td>${entry.seed_no || '-'}</td>
          <td>${entry.color_name || '-'}</td>
          <td>${countDisplay}</td>
          <td>${entry.remarks || '-'}</td>
          <td>${ entry.photo_url ? `<img src="${entry.photo_url}" width="50" alt="ফটো" class="preview-img">` : '-' }</td>
          <td style="text-align:center; cursor:pointer;" onclick="openNestedActionModal(${entry.id})">☰</td>
        </tr>`;
      });
      html += '</tbody></table></div>';
      resultsDiv.innerHTML = html;
      attachImagePreviewEvents();
    }
    
    let currentActionId = null;
    function openNestedActionModal(id) {
      currentActionId = id;
      document.getElementById("actionModal").classList.add("show");
    }
    document.getElementById("closeActionModal").addEventListener("click", () => {
      document.getElementById("actionModal").classList.remove("show");
    });
    document.getElementById("actionEditBtn").addEventListener("click", () => {
      document.getElementById("actionModal").classList.remove("show");
      modifyModal.classList.remove("show");
      editEntry(currentActionId);
    });
    document.getElementById("actionDeleteBtn").addEventListener("click", () => {
      document.getElementById("actionModal").classList.remove("show");
      modifyModal.classList.remove("show");
      deleteEntry(currentActionId);
    });
    
    document.getElementById("cameraBtn").addEventListener("click", () => {
      document.getElementById("photoCamera").click();
    });
  </script>
</body>
</html>
কাউন্ট 1 কাউন্ট 3 কাউন্ট 3 এরকম বাম থেকে ডান দিকে থাকবে ।
এর ইনপুট ফিল্ড আকারে ছোট থাকবে 
যেমন কাউন্ট:                 Qty:             এরকম পাশে থাকবে 
আপডেট করে সম্পূর্ণ কোড দিবা 
